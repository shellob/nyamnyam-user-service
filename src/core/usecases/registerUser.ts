import { User } from "../entites/user";
import { PrismaUserRepository } from "../../adapters/persistence/user.repository";
import * as bcrypt from "bcrypt";
import { v4 as uuidv4 } from "uuid";

interface RegisterUserDTO {
    name: string;
    email: string;
    password: string;
    role: "client" | "restaurant" | "admin";
}

export class RegisterUser {
    constructor(private readonly userRepository: PrismaUserRepository) {}

    async execute(dto: RegisterUserDTO): Promise<User> {
        // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email
        if (!User.validateEmail(dto.email)) {
            throw new Error("‚ùå Invalid email format");
        }

        // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
        const existingUser = await this.userRepository.findByEmail(dto.email);
        if (existingUser) {
            throw new Error("‚ùå Email is already in use");
        }

        // üîπ –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        const passwordHash = await bcrypt.hash(dto.password, 12);

        // üîπ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = new User(
            uuidv4(), // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            dto.name,
            dto.email,
            passwordHash,
            dto.role,
            "",
            null,
            new Date(),
            new Date()
        );

        // üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        return await this.userRepository.save(newUser);
    }
}
